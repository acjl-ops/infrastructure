#!/usr/bin/env bash

# set safe failures
set -euxo pipefail

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DOTFILES_FOLDER="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DOTFILES_FOLDER/$SOURCE"
done
DOTFILES_FOLDER="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
unset SOURCE

# set $USER variable
if [ -z "${USER+x}" ] || [ "$USER" == "" ]; then
    USER="$(id -u -n)"
    export USER
fi

# set $HOME variable
if [ -z "${HOME+x}" ] || [ "$HOME" == "" ]; then
    HOME="$(cd ~ && echo "$PWD")"
    export HOME
fi

# set $HOSTNAME variable
if [ -z "${HOSTNAME+x}" ] || [ "$HOSTNAME" == "" ]; then
    HOSTNAME="$(cat /etc/hostname)"
    export HOSTNAME
fi

###############################################################################

function main()
{
  # Minimal required dependencies
  hash git 2> /dev/null || (echo "Please install 'git'" >&2 && exit 1)
  hash rsync 2> /dev/null || (echo "Please install 'rsync'" >&2 && exit 1)
  hash xargs 2> /dev/null || (echo "Please install 'xargs'" >&2 && exit 1)
  hash stow 2> /dev/null || (echo "Please install 'stow'" >&2 && exit 1)

  (
    pushd "$DOTFILES_FOLDER"

    local git_hash=
    git_hash="$(git rev-parse HEAD)"
    git worktree add --detach dist "$git_hash" -fdq 2>/dev/null || :

    mkdir -p "$DOTFILES_FOLDER/dist"
    (cd "$DOTFILES_FOLDER/dist" && git checkout "$git_hash" -f 2>/dev/null) || :

    popd
  )

  if [ "$(readlink -f "$DOTFILES_FOLDER/../")" != "$(readlink -f "$HOME")" ]; then
    ln -sf "$DOTFILES_FOLDER" "$HOME/dotfiles"
  fi

  rsync -avlK \
    --exclude 'dist' \
    --exclude '.git' \
    --exclude '*.so' \
    --delete \
    "$DOTFILES_FOLDER/" "$DOTFILES_FOLDER/dist/"

  local machine_path=
  machine_path="$DOTFILES_FOLDER/dist/machines/$(cat /etc/hostname)"
  if [ ! -f "$machine_path" ]; then
    machine_path="$DOTFILES_FOLDER/dist/machines/generic"
  fi

  if [[ "${1:-}" == "nix"* ]]; then
    if [[ "${1:-}" == "nix-cached" ]]; then
      OPTIONS_NIX_ARGS=()
    else
      OPTIONS_NIX_ARGS=(--option substitute "false")
    fi

    nix run -I nixpkgs=channel:release-23.05 "${OPTIONS_NIX_ARGS[@]}" --impure home-manager/release-23.05 -- \
      switch "${OPTIONS_NIX_ARGS[@]}" --impure --flake .
  else
    (grep '^d ' < "$machine_path" | cut -d' ' -f2 || :) | \
      xargs -I{} stow --target="$HOME" -v -d "$DOTFILES_FOLDER/dist/dots" -R {}

    (grep '^C ' < "$machine_path" | cut -d' ' -f2 || :) | \
      xargs -I{} rsync -avlK --force "$DOTFILES_FOLDER/dist/dots/{}/" "$HOME/"

    source "$DOTFILES_FOLDER/lib/pkexec.sh"
    source "$DOTFILES_FOLDER/dist/dots/core/.local/bin/service"

    if [ "${1:-}" == "install" ]; then
      source "$DOTFILES_FOLDER/lib/installpkgs.sh"

      for appfile in $(grep '^A ' < "$machine_path" | cut -d' ' -f2 || :); do
        installpkgs_appfile "$DOTFILES_FOLDER/dist/apps/$appfile" || :
      done

      installpkgs_system_install

      (grep '^is ' < "$machine_path" | cut -d' ' -f2 || :) | \
        xargs -I{} bash -c "$DOTFILES_FOLDER/dist/scripts/{}"
    fi

    (grep '^s ' < "$machine_path" | cut -d' ' -f2 || :) | \
      xargs -I{} bash -c "$DOTFILES_FOLDER/dist/scripts/{}"

    for s in $(grep '^S ' < "$machine_path" | cut -d' ' -f2 || :); do
      service enable "$s" || :
    done
  fi
}

main "$@"
