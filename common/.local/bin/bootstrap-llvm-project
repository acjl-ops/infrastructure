#!/usr/bin/env bash

BOOTSTRAP_DEFAULT_ARGS="release-all-wasm-development"
BOOTSTRAP_SANITIZE_ARGS="debug-all-wasm-sanitize"

if [[ "$1" == "." || "$1" == "n" ]]; then
	set -- "$BOOTSTRAP_DEFAULT_ARGS" "${@:2}"
elif [[ "$1" == "s" ]]; then
	set -- "$BOOTSTRAP_SANITIZE_ARGS" "${@:2}"
fi

if [ "$1" == "git" ]; then
	# LLVM doesn't use sign-off
	if [ -f .git/hooks/prepare-commit-msg ]; then
		rm .git/hooks/prepare-commit-msg
	fi
	exit
else
	if [[ "$1" == "clean" || "$2" == "clean" ]]; then
		rm -rf build/
	fi
fi

if hash lld 2>/dev/null; then
	echo "--> LLD found, let's use it"
	_CLANG_DEFAULT_LINKER='lld'
	_LLVM_ENABLE_LLD="ON"
else
	echo "!!!!!!!!!!!!!!!!!!! Please install LLD !!!!!!!!!!!!!!!!!!!"
	echo "--> Using ld for now"
	_CLANG_DEFAULT_LINKER='ld'
	_LLVM_ENABLE_LLD="OFF"
fi

if hash clang 2>/dev/null; then
	echo "--> Clang found, let's use it"
	export CC=clang
	export CXX=clang++
	_CMAKE_C_COMPILER='clang'
	_CMAKE_CXX_COMPILER='clang++'
else
	echo "!!!!!!!!!!!!!!!!!!! Please install clang !!!!!!!!!!!!!!!!!!!"
	echo "--> Using gcc compiler for now"

	export CC=gcc
	export CXX=g++
	_CMAKE_C_COMPILER='gcc'
	_CMAKE_CXX_COMPILER='g++'
fi

if hash ccache 2>/dev/null; then
	export USE_CCACHE=1
	export CCACHE_COMPRESS=1
else
	echo "~~ CCache not found! Please install."
	exit 1
fi


# Build types
if [[ "$1" == "debug"* ]]; then
	echo "--> Building in debug"
	_CMAKE_BUILD_TYPE="Debug"
	_LLVM_USE_SPLIT_DWARF="ON"
	_LLVM_ENABLE_LTO="OFF"
elif [[ "$1" == "release"* ]]; then
	echo "--> Building in release"
	_CMAKE_BUILD_TYPE="Release"
	_LLVM_USE_SPLIT_DWARF="OFF"
	_LLVM_ENABLE_LTO="OFF"
fi

if [[ "$1" == *"-lto"* ]]; then
	_LLVM_ENABLE_LTO="Full"
fi

# Expensive checks
if [[ "$1" == *"-expensive"* ]]; then
	echo "--> Using expensive checks"
	_LLVM_ENABLE_EXPENSIVE_CHECKS="ON"
else
	_LLVM_ENABLE_EXPENSIVE_CHECKS="OFF"
fi

# Targets
if [[ "$1" == *"-x86"* ]]; then
	_LLVM_TARGETS_TO_BUILD="X86"
else
	# Default to all
	_LLVM_TARGETS_TO_BUILD="all"
fi

if [[ "$1" == *"-wasm"* ]]; then
	_LLVM_EXPERIMENTAL_TARGETS_TO_BUILD="WebAssembly"
fi

# Sanitization
if [[ "$1" == *"-sanitize"* ]]; then
	echo "--> Using sanitization"
	_LLVM_USE_SANITIZE_COVERAGE="ON"
	_LLVM_USE_SANITIZER="Address;Undefined"
else
	_LLVM_USE_SANITIZE_COVERAGE="OFF"
	_LLVM_USE_SANITIZER=""
fi

# Coverage
if [[ "$1" == *"-cov"* ]]; then
	echo "--> Using coverage"
	_LLVM_BUILD_INSTRUMENTED_COVERAGE="ON"
else
	_LLVM_BUILD_INSTRUMENTED_COVERAGE="OFF"
fi

# Shared libraries
if [[ "$1" == *"-development"* ]]; then
	_BUILD_SHARED_LIBS="ON"
	_CLANG_LINK_CLANG_DYLIB="OFF"
	_LLVM_LINK_LLVM_DYLIB="OFF"
else
	_BUILD_SHARED_LIBS="OFF"
	_CLANG_LINK_CLANG_DYLIB="ON"
	_LLVM_LINK_LLVM_DYLIB="ON"
fi

cmake -S llvm -B build -G Ninja \
	-DLLVM_ENABLE_PROJECTS="clang-tools-extra;clang;llvm;lldb;lld" \
	-DCMAKE_BUILD_TYPE="${_CMAKE_BUILD_TYPE}" \
	-DLLDB_EXPORT_ALL_SYMBOLS=OFF \
	-DLLVM_LIT_ARGS="-v -vv" \
	-DLLVM_OPTIMIZED_TABLEGEN=ON \
	-DLLVM_ENABLE_ASSERTIONS=ON \
	-DLLDB_ENABLE_LUA=OFF \
	-DLLDB_ENABLE_LZMA=ON \
	-DLLDB_ENABLE_LIBXML2=ON \
	-DLLDB_ENABLE_PYTHON=ON \
	-DLLVM_TARGETS_TO_BUILD="${_LLVM_TARGETS_TO_BUILD}" \
	-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="${_LLVM_EXPERIMENTAL_TARGETS_TO_BUILD}" \
	-DLLDB_TEST_USER_ARGS=-t \
	-DLLVM_CCACHE_BUILD=ON \
	-DLLVM_ENABLE_WERROR=ON \
	-DLLVM_LINK_LLVM_DYLIB="${_LLVM_LINK_LLVM_DYLIB}" \
	-DCLANG_LINK_CLANG_DYLIB="${_CLANG_LINK_CLANG_DYLIB}" \
	-DBUILD_SHARED_LIBS="${_BUILD_SHARED_LIBS}" \
	-DCMAKE_C_COMPILER="${_CMAKE_C_COMPILER}" \
	-DCMAKE_CXX_COMPILER="${_CMAKE_CXX_COMPILER}" \
	-DCMAKE_C_COMPILER_LAUNCHER="ccache" \
	-DCMAKE_CXX_COMPILER_LAUNCHER="ccache" \
	-DLLVM_ENABLE_LLD="${_LLVM_ENABLE_LLD}" \
	-DCLANG_DEFAULT_LINKER="${_CLANG_DEFAULT_LINKER}" \
	-DLLVM_USE_SPLIT_DWARF=ON \
	-DLLVM_ENABLE_LTO="${_LLVM_ENABLE_LTO}" \
	-DLLVM_ENABLE_EXPENSIVE_CHECKS="${_LLVM_ENABLE_EXPENSIVE_CHECKS}" \
	-DLLVM_BUILD_INSTRUMENTED_COVERAGE="${_LLVM_BUILD_INSTRUMENTED_COVERAGE}" \
	-DLLVM_USE_SANITIZE_COVERAGE="${_LLVM_USE_SANITIZE_COVERAGE}" \
	-DLLVM_USE_SANITIZER="${_LLVM_USE_SANITIZER}" \
	#
